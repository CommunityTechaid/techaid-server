type DonorParent {
    id: ID!
    name: String
    address: String
    website: String
    createdAt: String
    updatedAt: String
    donors: [Donor!]
    donorCount: Int
}

input CreateDonorParentInput {
    name: String
    address: String
    website: String
}

input UpdateDonorParentInput {
    id: ID!
    name: String
    postCode: String
    phoneNumber: String
    email: String
    referral: String
    consent: Boolean
}

"A representation of a page result from a query"
type DonorParentPage {
    "The list of deals retrieved from the server"
    content: [DonorParent!]
    "The number of total pages"
    totalPages: Int
    "The total amount of elements in this request"
    totalElements: Int
    "The size of the current page"
    size: Int
    "Returns whether the current page is the first"
    first: Boolean
    "Returns whether the current page is the last"
    last: Boolean
    "Returns if there is a next page"
    hasNext: Boolean
    "Returns if there is a previous page"
    hasPrevious: Boolean
    "Number of elements in current slice"
    numberOfElements: Int
    "Returns whether the page has content at all"
    hasContent: Boolean
    "The number of the current page"
    number: Int
}

input DonorParentWhereInput {
    id: LongComparison
    name: TextComparison
    address: TextComparison
    website: TextComparison
    createdAt: TimeComparison
    updatedAt: TimeComparison
    AND: [DonorParentWhereInput!]
    OR: [DonorParentWhereInput!]
    NOT: [DonorParentWhereInput!]
}

extend type Query {
    donorParentsConnection(page: PaginationInput, where: DonorParentWhereInput): DonorParentPage
    donorParents(where: DonorParentWhereInput!, orderBy: [KeyValuePair!]): [DonorParent!]!
    donorParent(where: DonorParentWhereInput!): DonorParent
}

extend type Mutation {
    createDonorParent(data: CreateDonorParentInput!) : DonorParent!
    updateDonorParent(data: UpdateDonorParentInput!): DonorParent!
    deleteDonorParent(id: ID!): Boolean
}

