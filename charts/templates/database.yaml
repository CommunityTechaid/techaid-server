apiVersion: kubedb.com/v1alpha1
kind: Postgres
metadata:
  name: {{ include "app.fullname" . }}-db
spec:
  version: {{ quote .Values.db.version }}
  replicas: {{ .Values.db.replicas }}
  storageType: Durable
  storage:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: {{ .Values.db.storage }}
  terminationPolicy: {{ .Values.db.terminationPolicy }}
  backupSchedule:
    cronExpression: {{ quote .Values.db.cronExpression }}
    storageSecretName: {{ .Values.db.s3.secret }}
    s3:
      bucket: {{ .Values.db.s3.bucket }}
  archiver:
    storage:
      storageSecretName: {{ .Values.db.s3.secret }}
      s3:
        bucket: {{ .Values.db.s3.bucket }}
  init:
    {{- if .Values.db.create }}
    scriptSource:
      configMap:
        name: {{ include "app.fullname" . }}-init-sql
    {{- end }}
    {{- if .Values.db.wal.enabled }}
    postgresWAL:
      storageSecretName: {{ .Values.db.s3.secret }}
      s3:
        bucket: {{ .Values.db.s3.bucket }}
    {{- end }}
---
{{- if .Values.db.create }}
apiVersion: v1
metadata:
  name: {{ include "app.fullname" . }}-init-sql
kind: ConfigMap
data:
  init.sql: |-
    SELECT 'CREATE DATABASE {{ .Values.db.name }}'
    WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '{{ .Values.db.name }}'')\gexec
{{- end }}
---