type DeviceRequest {
    id: ID
    deviceRequestItems: DeviceRequestItems
    status: DeviceRequestStatus
    createdAt: String
    updatedAt: String
    referringOrganisationContact: ReferringOrganisationContact
    isSales: Boolean,
    clientRef: String,
    details: String
    deviceRequestNeeds: DeviceRequestNeeds
    deviceRequestNotes: [DeviceRequestNote]
}

"A representation of a page result from a query"
type DeviceRequestPage {
    "The list of deals retrieved from the server"
    content: [DeviceRequest!]
    "The number of total pages"
    totalPages: Int
    "The total amount of elements in this request"
    totalElements: Int
    "The size of the current page"
    size: Int
    "Returns whether the current page is the first"
    first: Boolean
    "Returns whether the current page is the last"
    last: Boolean
    "Returns if there is a next page"
    hasNext: Boolean
    "Returns if there is a previous page"
    hasPrevious: Boolean
    "Number of elements in current slice"
    numberOfElements: Int
    "Returns whether the page has content at all"
    hasContent: Boolean
    "The number of the current page"
    number: Int
}

type DeviceRequestItems {
    phones: Int
    tablets: Int
    laptops: Int
    allInOnes: Int
    desktops: Int
    commsDevices: Int
    other: Int
}

input DeviceRequestItemsInput {
    phones: Int
    tablets: Int
    laptops: Int
    allInOnes: Int
    desktops: Int
    commsDevices: Int
    other: Int
}


type DeviceRequestNeeds{
    hasInternet: Boolean
    hasMobilityIssues: Boolean
    needQuickStart: Boolean
}

input DeviceRequestNeedsInput{
    hasInternet: Boolean
    hasMobilityIssues: Boolean
    needQuickStart: Boolean
}


#input DeviceRequestItemsWhereInput {
#    phones: IntegerComparison
#    tablets: IntegerComparison
#    laptops: IntegerComparison
#    allInOnes: IntegerComparison
#    desktops: IntegerComparison
#    filters: [JsonComparison!]
#    AND: [DeviceRequestItemsWhereInput]
#    OR: [DeviceRequestItemsWhereInput]
#    NOT: [DeviceRequestItemsWhereInput]
#}

input CreateDeviceRequestInput {
    deviceRequestItems: DeviceRequestItemsInput
    referringOrganisationContact: ID!
    isSales: Boolean,
    clientRef: String,
    details: String
    deviceRequestNeeds: DeviceRequestNeedsInput

}

input UpdateDeviceRequestInput {
    id: ID!
    status: DeviceRequestStatus
    deviceRequestItems: DeviceRequestItemsInput
    referringOrganisationContact: ID!
    isSales: Boolean,
    clientRef: String,
    details: String
    deviceRequestNote: DeviceRequestNoteInput
    deviceRequestNeeds: DeviceRequestNeedsInput
}


input DeviceRequestWhereInput {
    id: LongComparison
#    deviceRequestItems: DeviceRequestItemsWhereInput
    status: DeviceRequestStatusComparison
    referringOrganisationContact: ReferringOrganisationContactWhereInput
    isSales: BooleanComparison
    clientRef: TextComparison
    details: TextComparison
    AND: [DeviceRequestWhereInput!]
    OR: [DeviceRequestWhereInput!]
    NOT: [DeviceRequestWhereInput!]
}

input DeviceRequestStatusComparison{
    "Matches values that are equal to"
    _eq: DeviceRequestStatus
    "Matches values that are greater than"
    _gt: DeviceRequestStatus
    "Matches values that are greater than or equal to"
    _gte: DeviceRequestStatus
    "Matches values contained in the collection"
    _in: [DeviceRequestStatus]
    "Matches values that are null/not null"
    _is_null: Boolean
    "Matches values that are less than"
    _lt: DeviceRequestStatus
    "Matches values that are less than or equal to"
    _lte: DeviceRequestStatus
    "Matches values that are not equal to"
    _neq: DeviceRequestStatus
    "Matches values that are not contained in the collection"
    _nin: [DeviceRequestStatus]
}

enum DeviceRequestStatus{
    NEW,
    PROCESSING_EQUALITIES_DATA_COMPLETE,
    PROCESSING_COLLECTION_DELIVERY_ARRANGED,
    PROCESSING_ON_HOLD,
    REQUEST_COMPLETED,
    REQUEST_DECLINED,
    REQUEST_CANCELLED
}


extend type Query {
    deviceRequestConnections(page: PaginationInput, where: DeviceRequestWhereInput): DeviceRequestPage
    deviceRequests(where: DeviceRequestWhereInput!, orderBy: [KeyValuePair!]): [DeviceRequest!]!
    deviceRequest(where: DeviceRequestWhereInput!): DeviceRequest
}

extend type Mutation {
    #Will throw an exception if device requests for the contact exceeds DEVICE_LIMIT with this request
    createDeviceRequest(data: CreateDeviceRequestInput!) : DeviceRequest!
    updateDeviceRequest(data: UpdateDeviceRequestInput!): DeviceRequest!
    deleteDeviceRequest(id: ID!): Boolean
}
