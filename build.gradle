buildscript {
    ext {
        /*
         * Versions @ https://github.com/JetBrains/kotlin/releases
         * Pick versions suffixed with `-release`
         * More likely to be limited by the version of the all-open plugin @
         * https://mvnrepository.com/artifact/org.jetbrains.kotlin/kotlin-maven-allopen
         */
        kotlinVersion = '1.9.22' //Latest as of Feb. 2024 
        // Versions @ https://github.com/spring-projects/spring-boot/releases
        springBootVersion = '3.2.2' //Latest as of Feb. 2024

        graphQLVersion = '5.7.3'
    }
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
        classpath("org.postgresql:postgresql:42.2.10")
    }
}

plugins {
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.netflix.dgs.codegen' version '6.0.3'
    id 'org.jetbrains.kotlin.jvm' version '1.9.22'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.9.22'
}


plugins {
    id 'jacoco'
//    id "org.jlleitschuh.gradle.ktlint" version "9.2.1"
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-jpa'
apply plugin: 'kotlin-kapt'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'cta'
version = '0.0.2-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
    google()
}
 

allOpen {
    annotation("jakarta.persistence.Entity")
    annotation("jakarta.persistence.MappedSuperclass")
    annotation("jakarta.persistence.Embeddable")
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict', '-Xjvm-default=all-compatibility']
        jvmTarget = '17'
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict', '-Xjvm-default=all-compatibility']
        jvmTarget = '17'
    }
}

test {
//    dependsOn ktlintCheck
    useJUnitPlatform()
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        showExceptions true
        showCauses true
        showStackTraces true
        exceptionFormat "FULL"
    }

    finalizedBy jacocoTestReport
}

jacocoTestReport {
    group = "Reporting"
    reports {
        xml.required = false
        csv.required = false
    }
    afterEvaluate {
        getClassDirectories().setFrom(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/alphasights/controllers/**",
                    "com/alphasights/app/model/Q*"
            ])
        })
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            limit {
                minimum = 0.5
            }
        }
    }
}

bootRun {
    if (project.hasProperty('args')) {
        args project.args.split(',').collect{ it.trim() }
    }
}

dependencies {
    def hibernate_version = dependencyManagement.importedProperties['hibernate.version']
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'

     /* Security */
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    /* Gmail */
    implementation 'com.google.api-client:google-api-client-gson:2.3.0'
    implementation 'com.google.api-client:google-api-client:1.35.0'
    implementation 'com.google.apis:google-api-services-gmail:v1-rev20211108-1.32.1'
    implementation 'com.sun.mail:jakarta.mail:2.0.1'

    implementation 'org.springframework.security:spring-security-oauth2-resource-server'
    implementation 'org.springframework.security:spring-security-oauth2-jose'
    implementation 'org.springframework.security:spring-security-config'
    implementation 'com.auth0:auth0:1.15.0'
    implementation 'com.auth0:mvc-auth-commons:1.+'
    implementation 'com.auth0:java-jwt:3.10.3'

    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5:3.0.4.RELEASE'

    implementation 'org.webjars:bootstrap:4.2.1'
    implementation 'org.webjars:font-awesome:4.7.0'

    /* Kotlin Dependencies */
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    //implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk17'
    implementation "io.github.microutils:kotlin-logging:1.6.26"

    /* Graphql */
    implementation 'org.springframework.boot:spring-boot-starter-graphql'
    // https://mvnrepository.com/artifact/com.graphql-java/graphql-java-extended-scalars
    implementation 'com.graphql-java:graphql-java-extended-scalars'



    /*implementation "com.graphql-java-kickstart:graphql-spring-boot-starter:${graphQLVersion}"
    runtimeOnly "com.graphql-java-kickstart:graphiql-spring-boot-starter:${graphQLVersion}"
    runtimeOnly "com.graphql-java-kickstart:voyager-spring-boot-starter:${graphQLVersion}"
    testImplementation "com.graphql-java-kickstart:graphql-spring-boot-starter-test:${graphQLVersion}"*/

    //Tony A - March 6, 2024 - This is the recommended package for using latest jakarta with graphql
/*    implementation "com.graphql-java-kickstart:graphql-java-servlet:15.1.0"*/

    /* Utility Dependencies */
    implementation "info.picocli:picocli-spring-boot-starter:4.0.2"

    /* Logging / Monitoring Dependencies */
    implementation 'net.logstash.logback:logstash-logback-encoder:6.3'
    implementation 'ch.qos.logback:logback-classic:1.4.14'
    // implementation 'com.datadoghq:dd-trace-api:0.44.0'
    // implementation 'io.micrometer:micrometer-registry-datadog'

    /* Making use of JUnit 5 */
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude module: 'junit'
    }
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    /* Hibernate / DB specific dependencies */
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.flywaydb:flyway-core:9.22.3'
    implementation 'com.vladmihalcea:hibernate-types-52:2.9.8'
    implementation 'com.github.alexliesenfeld:querydsl-jpa-postgres-json:0.0.7'
    implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
    kapt "com.querydsl:querydsl-apt:5.0.0:jakarta"
    runtimeOnly 'org.postgresql:postgresql'
    /* Making use of embedded postgres db when running unit tests */
    testImplementation 'io.zonky.test:embedded-database-spring-test:1.5.3'
    /* Providing In-Memory H2 database as the default spring data-source */
    testImplementation 'com.h2database:h2:1.4.200'
    implementation "org.hibernate:hibernate-envers:${hibernate_version}"

    implementation("org.hibernate.tool:hibernate-tools-orm:${hibernate_version}")
    implementation("org.hibernate.tool:hibernate-tools-utils:${hibernate_version}")

    /* Devtools for hot reload */
    compileOnly("org.springframework.boot:spring-boot-devtools:${springBootVersion}")

    implementation("org.springframework.boot:spring-boot-starter-validation")
}



idea {
    module {
        def kaptMain = file('build/generated/source/kapt/main')
        sourceDirs += kaptMain
        generatedSourceDirs += kaptMain
    }
}

task updateAppName {
    doLast {
        def from = project.hasProperty('previousName')? project.property('previousName') : 'techaid-api'
        if(!project.hasProperty('appName')) {
            throw new GradleException('No appName specified. \n\n\t **** Please run the task with ./gradlew -PappName=<app-name> updateAppName ****')
        }

        def appName = project.property('appName')
        logger.info "Changing App Name from $from ==> $appName"

        ant.replace(
                dir: project.projectDir,
                token: from,
                value: appName,
                includes: 'settings.gradle,Makefile,build.gradle,docker-compose.yml,src/main/resources/*.yml,' +
                          'docker/proxy.conf,manifests/**/*,src/main/resources/static/index.html'
        )

        file ( "./.idea" ).list().each{
            f -> delete "./.idea/${f}"
        }

        exec {
            workingDir '.'
            commandLine 'sh', "${rootProject.projectDir}/gradlew", 'idea'//, 'ktlintApplyToIdea'
        }

        delete fileTree('./') {
            include '*.iml,*.ipr,*.iws'
        }
    }
}

task getDeps(type: Copy) {
    from sourceSets.main.runtimeClasspath
    into 'runtime/'

    doFirst {
        ant.delete(dir: 'runtime')
        ant.mkdir(dir: 'runtime')
    }

    doLast {
        ant.delete(dir: 'runtime')
    }
}

/* Tony - Tried testing this out to resolve annotation errors
kapt {
    javacOptions {
        option("querydsl.entityAccessors", true)
    }
    arguments {
        arg("plugin", "com.querydsl.apt.jpa.JPAAnnotationProcessor")
    }
}
*/

kapt { correctErrorTypes = true }