enum KitType {
    OTHER, 
    LAPTOP, 
    TABLET, 
    SMARTPHONE, 
    ALLINONE, 
    DESKTOP, 
    COMMSDEVICE
}

enum KitStorageType {
    HDD, 
    SSD, 
    HYBRID, 
    UNKNOWN
}

type KitStatusCount {
    status: KitStatus
    count: Int
}

type KitTypeCount {
    type: KitType
    count: Int
}

input KitTypeComparison {
    "Matches values that are equal to"
    _eq: KitType
    "Matches values that are greater than"
    _gt: KitType
    "Matches values that are greater than or equal to"
    _gte: KitType
    "Matches values contained in the collection"
    _in: [KitType]
    "Matches values that are null/not null"
    _is_null: Boolean
    "Matches values that are less than"
    _lt: KitType
    "Matches values that are less than or equal to"
    _lte: KitType
    "Matches values that are not equal to"
    _neq: KitType
    "Matches values that are not contained in the collection"
    _nin: [KitType]
}

enum KitStatus {
    DONATION_NEW,
    DONATION_DECLINED,
    DONATION_ACCEPTED,
    DONATION_NO_RESPONSE,
    DONATION_ARRANGED,
    PROCESSING_START,
    PROCESSING_WIPED,
    PROCESSING_FAILED_WIPE,
    PROCESSING_OS_INSTALLED,
    PROCESSING_FAILED_INSTALLATION,
    PROCESSING_WITH_TECHIE,
    PROCESSING_MISSING_PART,
    PROCESSING_STORED,
    ALLOCATION_ASSESSMENT,
    ALLOCATION_READY,
    ALLOCATION_QC_COMPLETED,
    ALLOCATION_DELIVERY_ARRANGED,
    DISTRIBUTION_DELIVERED,
    DISTRIBUTION_RECYCLED,
    DISTRIBUTION_REPAIR_RETURN
}

input KitStatusComparison {
    "Matches values that are equal to"
    _eq: KitStatus
    "Matches values that are greater than"
    _gt: KitStatus
    "Matches values that are greater than or equal to"
    _gte: KitStatus
    "Matches values contained in the collection"
    _in: [KitStatus]
    "Matches values that are null/not null"
    _is_null: Boolean
    "Matches values that are less than"
    _lt: KitStatus
    "Matches values that are less than or equal to"
    _lte: KitStatus
    "Matches values that are not equal to"
    _neq: KitStatus
    "Matches values that are not contained in the collection"
    _nin: [KitStatus]
}

input KitStorageTypeComparison {
    "Matches values that are equal to"
    _eq: KitStorageType
    "Matches values that are greater than"
    _gt: KitStorageType
    "Matches values that are greater than or equal to"
    _gte: KitStorageType
    "Matches values contained in the collection"
    _in: [KitStorageType]
    "Matches values that are null/not null"
    _is_null: Boolean
    "Matches values that are less than"
    _lt: KitStorageType
    "Matches values that are less than or equal to"
    _lte: KitStorageType
    "Matches values that are not equal to"
    _neq: KitStorageType
    "Matches values that are not contained in the collection"
    _nin: [KitStorageType]
}

type Kit {
    id: ID!
    type: KitType
    status: KitStatus
    model: String
    location: String
    createdAt: String
    updatedAt: String
    archived: Boolean
    age: Int
    attributes: KitAttributes!
    donor: Donor
    coordinates: Coordinates
    deviceRequest: DeviceRequest
    notes: [Note]!,
    make: String,
    deviceVersion: String,
    serialNo: String,
    storageCapacity: Int,
    typeOfStorage: KitStorageType,
    ramCapacity: Int,
    cpuType: String,
    tpmVersion: String,
    cpuCores: Int
}

type KitAttributes {
    state: String
    consent: String
    pickup: String
    otherType: String
    notes: String
    pickupAvailability: String
    credentials: String
    status: [String]
    network: String
    otherNetwork: String
}

input KitAttributesInput {
    state: String
    consent: String
    pickup: String
    otherType: String
    pickupAvailability: String
    credentials: String
    notes: String
    status: [String]
    network: String
    otherNetwork: String
}

"A representation of a page result from a query"
type KitPage {
    "The list of deals retrieved from the server"
    content: [Kit!]
    "The number of total pages"
    totalPages: Int
    "The total amount of elements in this request"
    totalElements: Int
    "The size of the current page"
    size: Int
    "Returns whether the current page is the first"
    first: Boolean
    "Returns whether the current page is the last"
    last: Boolean
    "Returns if there is a next page"
    hasNext: Boolean
    "Returns if there is a previous page"
    hasPrevious: Boolean
    "Number of elements in current slice"
    numberOfElements: Int
    "Returns whether the page has content at all"
    hasContent: Boolean
    "The number of the current page"
    number: Int
}

input KitWhereInput {
    id: LongComparison
    status: KitStatusComparison
    type: KitTypeComparison
    location: TextComparison
    age: IntegerComparison
    state: TextComparison
    model: TextComparison
    location: TextComparison
    createdAt: TimeComparison
    updatedAt: TimeComparison
    archived: BooleanComparison
    attributes: KitAttributesWhereInput
    donor: DonorWhereInput
    deviceRequest: DeviceRequestWhereInput
    make: String,
    deviceVersion: String,
    serialNo: TextComparison,
    storageCapacity: Int,
    typeOfStorage: KitStorageTypeComparison,
    ramCapacity: Int,
    cpuType: String,
    tpmVersion: String
    cpuCores: Int,
    AND: [KitWhereInput!]
    OR: [KitWhereInput!]
    NOT: [KitWhereInput!]
}

input KitAttributesWhereInput {
    otherType: TextComparison
    pickup: TextComparison
    state: TextComparison
    consent: TextComparison
    filters: [JsonComparison!]
    AND: [KitAttributesWhereInput!]
    OR: [KitAttributesWhereInput!]
    NOT: [KitAttributesWhereInput!]
}

input CreateKitInput {
    type: KitType!
    status: KitStatus
    model: String!
    location: String
    age: Int!
    attributes: KitAttributesInput!
    donorId: ID
    note: CreateNoteInput
    make: String
    deviceVersion: String
    serialNo: String
    storageCapacity: Int
    typeOfStorage: KitStorageType
    ramCapacity: Int
    cpuType: String
    tpmVersion: String
    cpuCores: Int
}

input QuickCreateKitInput {
    type: KitType
    model: String
    donorId: ID
}


input AutoCreateKitInput {
    type: KitType
    status: KitStatus
    model: String
    make: String
    deviceVersion:String
    serialNo: String!
    donorId: ID
    storageCapacity: Int
    typeOfStorage: KitStorageType
    ramCapacity: Int
    cpuType: String
    tpmVersion: String
    cpuCores: Int
}

input AutoUpdateKitInput {
    id: ID!
    type: KitType
    status: KitStatus
    model: String
    make: String,
    deviceVersion:String,
    serialNo: String,
    storageCapacity: Int,
    typeOfStorage: KitStorageType,
    ramCapacity: Int,
    cpuType: String,
    tpmVersion: String,
    cpuCores: Int
}

input UpdateKitInput {
    id: ID!
    type: KitType!
    status: KitStatus!
    model: String!
    age: Int!
    archived: Boolean
    location: String
    attributes: KitAttributesInput!
    donorId: ID
    deviceRequestId: ID
    note: CreateNoteInput,
    make: String,
    deviceVersion: String,
    serialNo: String,
    storageCapacity: Int,
    typeOfStorage: KitStorageType,
    ramCapacity: Int,
    cpuType: String,
    tpmVersion: String,
    cpuCores: Int
}

extend type Query {
    kitsConnection(page: PaginationInput, where: KitWhereInput): KitPage
    kits(where: KitWhereInput!, orderBy: [KeyValuePair!]): [Kit!]!
    kit(where: KitWhereInput!): Kit
    statusCount: [KitStatusCount!]
    typeCount: [KitTypeCount!]
}

extend type Mutation {
    createKit(data: CreateKitInput!) : Kit!
    quickCreateKit(data: QuickCreateKitInput!): Kit!
    updateKit(data: UpdateKitInput!): Kit!
    autoCreateKit(data:AutoCreateKitInput!): Kit!
    autoUpdateKit(data:AutoUpdateKitInput!): Kit!
    deleteKit(id: ID!): Boolean
}